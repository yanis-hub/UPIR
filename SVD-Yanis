import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2 as cv

def get_video_fps(video_path):
    """Obtient le FPS de la vidéo."""
    video = cv.VideoCapture(video_path)
    if not video.isOpened():
        print("Erreur : Impossible d'ouvrir la vidéo.")
        return None
    fps = video.get(cv.CAP_PROP_FPS)
    video.release()
    return fps

def perform_svd_on_coral(csv_file, video_path):
    # Lire le FPS de la vidéo
    video_fps = get_video_fps(video_path)
    if video_fps is None:
        print("Erreur : FPS de la vidéo non disponible.")
        return
    
    # Lire les données de position des noeuds depuis le fichier CSV
    data = pd.read_csv(csv_file)
    num_nodes = len([col for col in data.columns if '_u' in col])
    print(f"Nombre de noeuds détectés : {num_nodes}")
    
    # Extraire les colonnes de position des noeuds
    node_columns = [col for col in data.columns if '_u' in col or '_v' in col]
    node_data = data[node_columns].values  # Convertir en array numpy
    
    # Centrer les données
    node_data_centered = node_data - np.mean(node_data, axis=0)
    
    # Appliquer la SVD
    U, S, Vt = np.linalg.svd(node_data_centered, full_matrices=False)
    
    # Calculer l'énergie de chaque mode
    energy = S**2 / np.sum(S**2)
    
    # Afficher l'énergie des modes
    plt.figure(figsize=(10, 6))
    plt.plot(np.arange(1, len(energy) + 1), energy, 'o-', label="Énergie des modes")
    plt.xlabel("Mode")
    plt.ylabel("Énergie proportionnelle")
    plt.title("Contribution de chaque mode à l'énergie totale")
    plt.legend()
    plt.grid()
    plt.show()
    
    # Visualiser les modes principaux
    visualize_modes(U, num_nodes, energy, node_columns)
    
def visualize_modes(U, num_nodes, energy, node_columns):
    """Affiche les modes principaux pour différents nombres de noeuds."""
    mod = min(num_nodes, 3)  # Limiter le nombre de modes à visualiser pour simplifier
    
    for mode_index in range(mod):
        plt.figure(figsize=(8, 6))
        plt.title(f"Mode {mode_index + 1} (Énergie : {energy[mode_index]:.2%})")
        
        # Récupérer les contributions en X et Y pour chaque noeud
        for i in range(0, len(node_columns), 2):
            x_contrib = U[i, mode_index] * 100  # Amplitude en X
            y_contrib = U[i + 1, mode_index] * 100  # Amplitude en Y
            
            plt.plot([0, x_contrib], [0, y_contrib], marker='o', label=f"Noeud {i//2 + 1}")
        
        # Configurer les liens entre les noeuds pour différents nombres de noeuds
        if num_nodes == 2:
            pairs = [(0, 1)]
        elif num_nodes == 5:
            pairs = [(2, 0), (2, 1), (2, 3), (2, 4)]  # Structure en "Y" pour 5 noeuds
        elif num_nodes == 8:
            pairs = [(2, 0), (2, 1), (2, 3), (2, 6), (6, 4), (6, 5), (6, 7)]  # Structure en "corail"
        
        for f in pairs:
            x1, y1 = U[f[0]*2, mode_index] * 100, U[f[0]*2 + 1, mode_index] * 100
            x2, y2 = U[f[1]*2, mode_index] * 100, U[f[1]*2 + 1, mode_index] * 100
            plt.plot([x1, x2], [y1, y2], 'k-', lw=2)
        
        plt.xlabel("Déplacement en X (amplitude)")
        plt.ylabel("Déplacement en Y (amplitude)")
        plt.axis('equal')
        plt.legend()
        plt.grid()
        plt.show()

# Exemple d'utilisation
csv_file = "/Users/yanis/Desktop/output_csv/N=2 (croped).csv"  # Remplacer par votre fichier CSV
video_path = "/Users/yanis/Desktop/N=2 (croped).MP4"  # Remplacer par votre chemin vidéo
perform_svd_on_coral(csv_file, video_path)
